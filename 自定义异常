/**使用异常机制的注意事项
 * 不要用异常处理代替错误处理（不要把错误都用异常处理的方式解决），会降低程序清晰度，且效率低下。
 * 处理异常不能代替简单测试，只在异常情况下使用异常机制
 * 不要进行小粒度的异常处理，将try语句块放在一起
 * 异常往往在高层处理
 * */
public class Test4 {
	public static void main(String[] args) {
		Person p=new Person();
		p.setAge(-19);
		
	}

}class Person{
	private int age;

	public int getAge() {
		return age;
	}

	public void setAge(int age) {//throws IllegalAgeException 申明在这里，是throws;
		if(age<0) {
			try {//CheckedException是已检查异常，需要抛出或者调用try{}catch{}语句
				throw new IllegalAgeException("年龄不能为负数");
			} catch (IllegalAgeException e) {
				
				e.printStackTrace();
			}//这里是手动抛出，所以是throw
		}
		this.age = age;
	}
	
}
class IllegalAgeException extends Exception/*RuntimeException是运行时异常，编译时不会报错，Exception则是checke
edException则为已检查异常，编译时就需要解决*/{
	public IllegalAgeException() {//无参构造器
		
	}public IllegalAgeException(String msg){//有参构造器，自定义异常的方法。
		super(msg);
	}
}

