super关键字的作用举例：
package cn.txt.oo;

public class super关键字 {
	public static void main(String[] args) {
		Child1 ch=new Child1();//通过new关键字创建新的对象继而调用Child1类中的普通方法Father;
		ch.Father();//new didi();
	}}
	

class Father1{
	public int value;
	public void Father() {
		value = 100;
		System.out.println(" Father   value"+value);
	}
}class Child1 extends Father1{//通过extends关键字继承父类的属性和方法，构造方法无法继承。
	public int value ;//这里如果加上public int value就为重新创建了一个名叫value的对象，更改value的值将不会对father类
	//中的value值进行改变，两个value为不同的对象。若不加(不创建新对象)则表示value仍旧是father类中的对象，
	//更改value的值father中value的值也会改变，两个value是同一个对象。可以注释掉public int value观察结果。
	public void Father() {
		super.Father();//使用super关键字调用父类中被覆盖的方法。
		value = 200;
		System.out.println("Child value"+value);
		System.out.println(super.value);//两个value是不同的对象，所以尽管方法被重写，但是父类中value的值并没有改变。
	}
	
}


super关键字在构造方法中的作用
package cn.txt.oo;

public class 构造方法super关键字 {//public修饰的可以被本包的程序访问
	
	public static void main(String[] args) {
		System.out.println("开始创建一个ChildClass对象。。。");
		new Child();//所以虽然调用的是Child类的构造方法，但是程序会默认调用父类的方法。在父类中又会调用父类的方法
		//直到Object类，这涉及到继承树追溯的过程。静态初始化块执行时也是先调用子类的静态初始化块，再调用父类的静
		//态初始化块，直到Object为止。 new Father().id
		ceshi12 h = new ceshi12();
		h.setId(1000);
		}

}  class Father{
	protected int s;//protected修饰的属性和方法以及类能被本包和其他包的子类访问。
	
	private int id;//private修饰的属性和方法只能在本类中使用；
	public Father() {
		//super();构造方法的第一句永远是super()，打不打出来无关，系统会自己加；程序会先调用父类的无参构造方法，
		//父类也是如此，直到Object类为止。
		System.out.println("我是构造方法爸爸！！！");
	}
}class Child extends Father{
	public static void main(String[] args) {
		ceshi12 f = new ceshi12();
		f.setId(100);
	}
	int k;//default为默认类型，本包内的程序可用。
	public Child() {
		//super();
		System.out.println("我是儿子");
	}
	
}
